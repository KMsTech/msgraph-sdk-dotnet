// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.

// Template Source: Templates\CSharp\Requests\IEntityRequest.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.IO;
    using System.Net.Http;
    using System.Threading;
    using System.Linq.Expressions;

    /// <summary>
    /// The interface IGovernanceScenarioRequest.
    /// </summary>
    public partial interface IGovernanceScenarioRequest : IBaseRequest
    {
        /// <summary>
        /// Creates the specified GovernanceScenario using PUT.
        /// </summary>
        /// <param name="governanceScenarioToCreate">The GovernanceScenario to create.</param>
        /// <returns>The created GovernanceScenario.</returns>
        System.Threading.Tasks.Task<GovernanceScenario> CreateAsync(GovernanceScenario governanceScenarioToCreate);        /// <summary>
        /// Creates the specified GovernanceScenario using PUT.
        /// </summary>
        /// <param name="governanceScenarioToCreate">The GovernanceScenario to create.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The created GovernanceScenario.</returns>
        System.Threading.Tasks.Task<GovernanceScenario> CreateAsync(GovernanceScenario governanceScenarioToCreate, CancellationToken cancellationToken);

        /// <summary>
        /// Deletes the specified GovernanceScenario.
        /// </summary>
        /// <returns>The task to await.</returns>
        System.Threading.Tasks.Task DeleteAsync();

        /// <summary>
        /// Deletes the specified GovernanceScenario.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await.</returns>
        System.Threading.Tasks.Task DeleteAsync(CancellationToken cancellationToken);

        /// <summary>
        /// Gets the specified GovernanceScenario.
        /// </summary>
        /// <returns>The GovernanceScenario.</returns>
        System.Threading.Tasks.Task<GovernanceScenario> GetAsync();

        /// <summary>
        /// Gets the specified GovernanceScenario.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The GovernanceScenario.</returns>
        System.Threading.Tasks.Task<GovernanceScenario> GetAsync(CancellationToken cancellationToken);

        /// <summary>
        /// Updates the specified GovernanceScenario using PATCH.
        /// </summary>
        /// <param name="governanceScenarioToUpdate">The GovernanceScenario to update.</param>
        /// <returns>The updated GovernanceScenario.</returns>
        System.Threading.Tasks.Task<GovernanceScenario> UpdateAsync(GovernanceScenario governanceScenarioToUpdate);

        /// <summary>
        /// Updates the specified GovernanceScenario using PATCH.
        /// </summary>
        /// <param name="governanceScenarioToUpdate">The GovernanceScenario to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The updated GovernanceScenario.</returns>
        System.Threading.Tasks.Task<GovernanceScenario> UpdateAsync(GovernanceScenario governanceScenarioToUpdate, CancellationToken cancellationToken);

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="value">The expand value.</param>
        /// <returns>The request object to send.</returns>
        IGovernanceScenarioRequest Expand(string value);

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="expandExpression">The expression from which to calculate the expand value.</param>
        /// <returns>The request object to send.</returns>
        IGovernanceScenarioRequest Expand(Expression<Func<GovernanceScenario, object>> expandExpression);

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="value">The select value.</param>
        /// <returns>The request object to send.</returns>
        IGovernanceScenarioRequest Select(string value);

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="selectExpression">The expression from which to calculate the select value.</param>
        /// <returns>The request object to send.</returns>
        IGovernanceScenarioRequest Select(Expression<Func<GovernanceScenario, object>> selectExpression);

    }
}
