// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.

// Template Source: Templates\CSharp\Model\ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type ExcludedApps.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    [JsonConverter(typeof(DerivedTypeConverter))]
    public partial class ExcludedApps
    {
    
        /// <summary>
        /// Gets or sets access.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "access", Required = Newtonsoft.Json.Required.Default)]
        public bool? Access { get; set; }
    
        /// <summary>
        /// Gets or sets excel.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "excel", Required = Newtonsoft.Json.Required.Default)]
        public bool? Excel { get; set; }
    
        /// <summary>
        /// Gets or sets groove.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "groove", Required = Newtonsoft.Json.Required.Default)]
        public bool? Groove { get; set; }
    
        /// <summary>
        /// Gets or sets infoPath.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "infoPath", Required = Newtonsoft.Json.Required.Default)]
        public bool? InfoPath { get; set; }
    
        /// <summary>
        /// Gets or sets lync.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "lync", Required = Newtonsoft.Json.Required.Default)]
        public bool? Lync { get; set; }
    
        /// <summary>
        /// Gets or sets oneDrive.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "oneDrive", Required = Newtonsoft.Json.Required.Default)]
        public bool? OneDrive { get; set; }
    
        /// <summary>
        /// Gets or sets oneNote.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "oneNote", Required = Newtonsoft.Json.Required.Default)]
        public bool? OneNote { get; set; }
    
        /// <summary>
        /// Gets or sets outlook.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "outlook", Required = Newtonsoft.Json.Required.Default)]
        public bool? Outlook { get; set; }
    
        /// <summary>
        /// Gets or sets powerPoint.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "powerPoint", Required = Newtonsoft.Json.Required.Default)]
        public bool? PowerPoint { get; set; }
    
        /// <summary>
        /// Gets or sets publisher.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "publisher", Required = Newtonsoft.Json.Required.Default)]
        public bool? Publisher { get; set; }
    
        /// <summary>
        /// Gets or sets sharePointDesigner.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "sharePointDesigner", Required = Newtonsoft.Json.Required.Default)]
        public bool? SharePointDesigner { get; set; }
    
        /// <summary>
        /// Gets or sets visio.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "visio", Required = Newtonsoft.Json.Required.Default)]
        public bool? Visio { get; set; }
    
        /// <summary>
        /// Gets or sets word.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "word", Required = Newtonsoft.Json.Required.Default)]
        public bool? Word { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData(ReadData = true)]
        public IDictionary<string, object> AdditionalData { get; set; }
    
    }
}
