// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.

// Template Source: Templates\CSharp\Model\ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type BitLockerSystemDrivePolicy.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    [JsonConverter(typeof(DerivedTypeConverter))]
    public partial class BitLockerSystemDrivePolicy
    {
    
        /// <summary>
        /// Gets or sets encryptionMethod.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "encryptionMethod", Required = Newtonsoft.Json.Required.Default)]
        public BitLockerEncryptionMethod? EncryptionMethod { get; set; }
    
        /// <summary>
        /// Gets or sets startupAuthenticationRequired.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startupAuthenticationRequired", Required = Newtonsoft.Json.Required.Default)]
        public bool? StartupAuthenticationRequired { get; set; }
    
        /// <summary>
        /// Gets or sets startupAuthenticationBlockWithoutTpmChip.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startupAuthenticationBlockWithoutTpmChip", Required = Newtonsoft.Json.Required.Default)]
        public bool? StartupAuthenticationBlockWithoutTpmChip { get; set; }
    
        /// <summary>
        /// Gets or sets startupAuthenticationTpmUsage.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startupAuthenticationTpmUsage", Required = Newtonsoft.Json.Required.Default)]
        public ConfigurationUsage? StartupAuthenticationTpmUsage { get; set; }
    
        /// <summary>
        /// Gets or sets startupAuthenticationTpmPinUsage.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startupAuthenticationTpmPinUsage", Required = Newtonsoft.Json.Required.Default)]
        public ConfigurationUsage? StartupAuthenticationTpmPinUsage { get; set; }
    
        /// <summary>
        /// Gets or sets startupAuthenticationTpmKeyUsage.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startupAuthenticationTpmKeyUsage", Required = Newtonsoft.Json.Required.Default)]
        public ConfigurationUsage? StartupAuthenticationTpmKeyUsage { get; set; }
    
        /// <summary>
        /// Gets or sets startupAuthenticationTpmPinAndKeyUsage.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startupAuthenticationTpmPinAndKeyUsage", Required = Newtonsoft.Json.Required.Default)]
        public ConfigurationUsage? StartupAuthenticationTpmPinAndKeyUsage { get; set; }
    
        /// <summary>
        /// Gets or sets minimumPinLength.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "minimumPinLength", Required = Newtonsoft.Json.Required.Default)]
        public Int32? MinimumPinLength { get; set; }
    
        /// <summary>
        /// Gets or sets recoveryOptions.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "recoveryOptions", Required = Newtonsoft.Json.Required.Default)]
        public BitLockerRecoveryOptions RecoveryOptions { get; set; }
    
        /// <summary>
        /// Gets or sets prebootRecoveryEnableMessageAndUrl.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "prebootRecoveryEnableMessageAndUrl", Required = Newtonsoft.Json.Required.Default)]
        public bool? PrebootRecoveryEnableMessageAndUrl { get; set; }
    
        /// <summary>
        /// Gets or sets prebootRecoveryMessage.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "prebootRecoveryMessage", Required = Newtonsoft.Json.Required.Default)]
        public string PrebootRecoveryMessage { get; set; }
    
        /// <summary>
        /// Gets or sets prebootRecoveryUrl.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "prebootRecoveryUrl", Required = Newtonsoft.Json.Required.Default)]
        public string PrebootRecoveryUrl { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData(ReadData = true)]
        public IDictionary<string, object> AdditionalData { get; set; }
    
    }
}
