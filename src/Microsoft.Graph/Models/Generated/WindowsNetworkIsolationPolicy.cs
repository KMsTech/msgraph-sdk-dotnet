// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.

// Template Source: Templates\CSharp\Model\ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type WindowsNetworkIsolationPolicy.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    [JsonConverter(typeof(DerivedTypeConverter))]
    public partial class WindowsNetworkIsolationPolicy
    {
    
        /// <summary>
        /// Gets or sets enterpriseNetworkDomainNames.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enterpriseNetworkDomainNames", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> EnterpriseNetworkDomainNames { get; set; }
    
        /// <summary>
        /// Gets or sets enterpriseCloudResources.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enterpriseCloudResources", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<ProxiedDomain> EnterpriseCloudResources { get; set; }
    
        /// <summary>
        /// Gets or sets enterpriseIPRanges.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enterpriseIPRanges", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<IpRange> EnterpriseIPRanges { get; set; }
    
        /// <summary>
        /// Gets or sets enterpriseInternalProxyServers.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enterpriseInternalProxyServers", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> EnterpriseInternalProxyServers { get; set; }
    
        /// <summary>
        /// Gets or sets enterpriseIPRangesAreAuthoritative.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enterpriseIPRangesAreAuthoritative", Required = Newtonsoft.Json.Required.Default)]
        public bool? EnterpriseIPRangesAreAuthoritative { get; set; }
    
        /// <summary>
        /// Gets or sets enterpriseProxyServers.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enterpriseProxyServers", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> EnterpriseProxyServers { get; set; }
    
        /// <summary>
        /// Gets or sets enterpriseProxyServersAreAuthoritative.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enterpriseProxyServersAreAuthoritative", Required = Newtonsoft.Json.Required.Default)]
        public bool? EnterpriseProxyServersAreAuthoritative { get; set; }
    
        /// <summary>
        /// Gets or sets neutralDomainResources.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "neutralDomainResources", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> NeutralDomainResources { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData(ReadData = true)]
        public IDictionary<string, object> AdditionalData { get; set; }
    
    }
}
