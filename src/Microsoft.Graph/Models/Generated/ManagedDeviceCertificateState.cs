// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.

// Template Source: Templates\CSharp\Model\EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type Managed Device Certificate State.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class ManagedDeviceCertificateState : Entity
    {
    
        /// <summary>
        /// Gets or sets device platform.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "devicePlatform", Required = Newtonsoft.Json.Required.Default)]
        public DevicePlatformType? DevicePlatform { get; set; }
    
        /// <summary>
        /// Gets or sets certificate key usage.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "certificateKeyUsage", Required = Newtonsoft.Json.Required.Default)]
        public KeyUsages? CertificateKeyUsage { get; set; }
    
        /// <summary>
        /// Gets or sets certificate profile display name.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "certificateProfileDisplayName", Required = Newtonsoft.Json.Required.Default)]
        public string CertificateProfileDisplayName { get; set; }
    
        /// <summary>
        /// Gets or sets device display name.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "deviceDisplayName", Required = Newtonsoft.Json.Required.Default)]
        public string DeviceDisplayName { get; set; }
    
        /// <summary>
        /// Gets or sets user display name.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "userDisplayName", Required = Newtonsoft.Json.Required.Default)]
        public string UserDisplayName { get; set; }
    
        /// <summary>
        /// Gets or sets server url.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "serverUrl", Required = Newtonsoft.Json.Required.Default)]
        public string ServerUrl { get; set; }
    
        /// <summary>
        /// Gets or sets certificate expiration date time.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "certificateExpirationDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? CertificateExpirationDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets last certificate state change date time.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "lastCertificateStateChangeDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? LastCertificateStateChangeDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets certificate issuer.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "certificateIssuer", Required = Newtonsoft.Json.Required.Default)]
        public string CertificateIssuer { get; set; }
    
        /// <summary>
        /// Gets or sets certificate thumbprint.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "certificateThumbprint", Required = Newtonsoft.Json.Required.Default)]
        public string CertificateThumbprint { get; set; }
    
        /// <summary>
        /// Gets or sets certificate serial number.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "certificateSerialNumber", Required = Newtonsoft.Json.Required.Default)]
        public string CertificateSerialNumber { get; set; }
    
        /// <summary>
        /// Gets or sets certificate key length.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "certificateKeyLength", Required = Newtonsoft.Json.Required.Default)]
        public Int32? CertificateKeyLength { get; set; }
    
        /// <summary>
        /// Gets or sets enhanced key usage.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enhancedKeyUsage", Required = Newtonsoft.Json.Required.Default)]
        public string EnhancedKeyUsage { get; set; }
    
    }
}

